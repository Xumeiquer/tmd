name: Compile & Publush

on:
  push:
    branches:
      - 'main'

env:
  TARGETS: 'windows-static-x64;linux-x64-clang'
  TDLIB_VERSION: v1.8.0
  GO_VERSION: 1.22.0

jobs:
  compile:
    name: Compile TMD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare and cross-compile TDLIB (1/2)
        uses: addnab/docker-run-action@v3
        with:
          image: debian:latest
          options: -v ${{ github.workspace }}/tdlib:/usr/src/tdlib -e TMD_TARGETS=${{env.TARGETS}} -e TDLIB_CHECKOUT_VERSION=${{env.TDLIB_VERSION}}
          run: |
            set -x
            apt update
            DEBIAN_FRONTEND=noninteractive apt install -y make git zlib1g-dev libssl-dev gperf php-cli cmake g++
            mkdir -p /usr/src/tdlib/
            git clone https://github.com/tdlib/td.git /usr/src/tdlib/td
            cd /usr/src/tdlib/td
            git checkout $TDLIB_CHECKOUT_VERSION
            mkdir -p /usr/src/tdlib/td/build-native
            OLDIFS="$IFS"
            IFS=';'
            for target in $TMD_TARGETS; do
              mkdir -p /usr/src/tdlib/td/build-${target}
              chmod 777 /usr/src/tdlib/td/build-${target}
            done
            IFS="$OLDIFS"
            cd /usr/src/tdlib/td/build-native
            cmake -DCMAKE_BUILD_TYPE=Release ..
            cmake --build . --target prepare_cross_compiling

      - name: Prepare and cross-compile TDLIB (2/2)
        run: |
          TMD_TARGETS=($(echo "${{env.TARGETS}}" | tr ';' ' '))
          for target in ${TMD_TARGETS[@]}; do
            echo "Building TDLIB for ${target}..."
            mkdir -p ${{ github.workspace }}/lib/${target}
            docker run --rm dockcross/${target} > /usr/local/bin/dockcross-${target}
            chmod +x /usr/local/bin/dockcross-${target}
            /usr/local/bin/dockcross-${target} -a "-v ${{ github.workspace }}/tdlib:/usr/src/tdlib/ -v ${{ github.workspace }}/lib/${target}:/opt/tdlib/${target}" bash -c "\
              git config --global --add safe.directory /usr/src/tdlib/td && \
              mkdir -p /opt/tdlib/${target} && \
              cd /usr/src/tdlib/td/build-${target} && \
              case "$target" in \
              *windows*) \
                cmake -DCMAKE_BUILD_TYPE=Release -DOPENSSL_CRYPTO_LIBRARY=/usr/x86_64-w64-mingw32/lib/libz.dll.a -DOPENSSL_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/ -DZLIB_LIBRARY=/usr/x86_64-w64-mingw32/lib/libz.dll.a -DZLIB_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include -DOPENSSL_CRYPTO_LIBRARY=/usr/local/ssl -DCMAKE_INSTALL_PREFIX:PATH=/opt/tdlib/${target} .. \
                ;;  \
              *linux*)  \
                cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/opt/tdlib/${target} .. \
                ;; \
              esac && \
              cmake --build . --target install && \
              ls -la /opt/tdlib/${target}"
          done
      
      - name: Compile TMD
        run: |
          TMD_TARGETS=($(echo "${{env.TARGETS}}" | tr ';' ' '))
          for target in ${TMD_TARGETS[@]}; do
            /usr/local/bin/dockcross-${target} -a "- ${{ github.workspace }}:/src/tmd" bash -c "wget -c https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz -O - | tar -xz -C /usr/local && export PATH=$PATH:/usr/local/go/bin && apt update && apt install zlib1g-dev libssl-dev && find /usr -name '*.a' && find ${{ github.workspace }} -name '*.a'"
          done
          
